using System;

public abstract class Course
{
    public int CourseId { get; set; }
    public string Title { get; set; }
    
    // Método abstracto que será implementado por las clases derivadas
    public abstract void Subscribe(Student std);
}

public class OnlineCourse : Course
{
    // Implementación del método Subscribe para cursos en línea
    public override void Subscribe(Student std)
    {
        Console.WriteLine($"{std.Name} has been subscribed to the online course: {Title}");
        // Lógica para suscribir a un curso en línea
    }
}

public class OfflineCourse : Course
{
    // Implementación del método Subscribe para cursos presenciales
    public override void Subscribe(Student std)
    {
        Console.WriteLine($"{std.Name} has been subscribed to the offline course: {Title}");
        // Lógica para suscribir a un curso presencial
    }
}

// Nueva clase HybridCourse que sigue el principio de abierto/cerrado
public class HybridCourse : Course
{
    // Implementación del método Subscribe para cursos híbridos
    public override void Subscribe(Student std)
    {
        Console.WriteLine($"{std.Name} has been subscribed to the hybrid course: {Title}");
        // Lógica para suscribir a un curso híbrido (combinación de en línea y presencial)
    }
}

public class Student
{
    public int StudentId { get; set; }
    public string Name { get; set; }
}

public class Program
{
    public static void Main(string[] args)
    {
        // Crear una instancia de Student
        Student student = new Student { StudentId = 1, Name = "John Doe" };

        // Crear instancias de diferentes tipos de cursos
        Course onlineCourse = new OnlineCourse { CourseId = 101, Title = "C# Programming" };
        Course offlineCourse = new OfflineCourse { CourseId = 102, Title = "Data Structures" };
        Course hybridCourse = new HybridCourse { CourseId = 103, Title = "Advanced Algorithms" };

        // Suscribir al estudiante a los diferentes cursos
        onlineCourse.Subscribe(student);
        offlineCourse.Subscribe(student);
        hybridCourse.Subscribe(student);

        // Mensaje de confirmación
        Console.WriteLine("Subscription successful for all courses.");
    }
}




//Explicación del Código

    Clase Abstracta Course: Define la estructura básica para todos los tipos de cursos con propiedades CourseId y Title, y un método abstracto Subscribe que debe ser implementado por las clases derivadas.

    Clases OnlineCourse y OfflineCourse: Implementan el método Subscribe para suscribir a estudiantes a cursos en línea y presenciales respectivamente. No modificamos estas clases para agregar nuevos tipos de cursos, cumpliendo así con el principio de abierto/cerrado.

    Nueva Clase HybridCourse: Hereda de Course y proporciona su propia implementación del método Subscribe para manejar la suscripción a cursos híbridos.

    Clase Student: Representa a un estudiante con propiedades StudentId y Name.

    Clase Program: Contiene el método Main, donde se crean instancias de los diferentes tipos de cursos y se suscribe a un estudiante a estos cursos. Esto demuestra cómo extender la funcionalidad sin modificar las clases existentes.

Con esta estructura, hemos aplicado correctamente el principio de abierto/cerrado, permitiendo la extensión de la funcionalidad de suscripción a cursos sin modificar las clases existentes.
